// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package service_test

//go:generate minimock -i route256/cart/internal/domain/cart/service.OrdersClient -o orders_client_mock_test.go -n OrdersClientMock -p service_test

import (
	"context"
	"route256/cart/internal/domain/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrdersClientMock implements OrdersClient
type OrdersClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, userId int64, items []model.CartItemModel) (i1 int64, err error)
	funcCreateOrderOrigin    string
	inspectFuncCreateOrder   func(ctx context.Context, userId int64, items []model.CartItemModel)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mOrdersClientMockCreateOrder
}

// NewOrdersClientMock returns a mock for OrdersClient
func NewOrdersClientMock(t minimock.Tester) *OrdersClientMock {
	m := &OrdersClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mOrdersClientMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*OrdersClientMockCreateOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrdersClientMockCreateOrder struct {
	optional           bool
	mock               *OrdersClientMock
	defaultExpectation *OrdersClientMockCreateOrderExpectation
	expectations       []*OrdersClientMockCreateOrderExpectation

	callArgs []*OrdersClientMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrdersClientMockCreateOrderExpectation specifies expectation struct of the OrdersClient.CreateOrder
type OrdersClientMockCreateOrderExpectation struct {
	mock               *OrdersClientMock
	params             *OrdersClientMockCreateOrderParams
	paramPtrs          *OrdersClientMockCreateOrderParamPtrs
	expectationOrigins OrdersClientMockCreateOrderExpectationOrigins
	results            *OrdersClientMockCreateOrderResults
	returnOrigin       string
	Counter            uint64
}

// OrdersClientMockCreateOrderParams contains parameters of the OrdersClient.CreateOrder
type OrdersClientMockCreateOrderParams struct {
	ctx    context.Context
	userId int64
	items  []model.CartItemModel
}

// OrdersClientMockCreateOrderParamPtrs contains pointers to parameters of the OrdersClient.CreateOrder
type OrdersClientMockCreateOrderParamPtrs struct {
	ctx    *context.Context
	userId *int64
	items  *[]model.CartItemModel
}

// OrdersClientMockCreateOrderResults contains results of the OrdersClient.CreateOrder
type OrdersClientMockCreateOrderResults struct {
	i1  int64
	err error
}

// OrdersClientMockCreateOrderOrigins contains origins of expectations of the OrdersClient.CreateOrder
type OrdersClientMockCreateOrderExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserId string
	originItems  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mOrdersClientMockCreateOrder) Optional() *mOrdersClientMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for OrdersClient.CreateOrder
func (mmCreateOrder *mOrdersClientMockCreateOrder) Expect(ctx context.Context, userId int64, items []model.CartItemModel) *mOrdersClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrdersClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &OrdersClientMockCreateOrderParams{ctx, userId, items}
	mmCreateOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectCtxParam1 sets up expected param ctx for OrdersClient.CreateOrder
func (mmCreateOrder *mOrdersClientMockCreateOrder) ExpectCtxParam1(ctx context.Context) *mOrdersClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrdersClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &OrdersClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateOrder.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateOrder
}

// ExpectUserIdParam2 sets up expected param userId for OrdersClient.CreateOrder
func (mmCreateOrder *mOrdersClientMockCreateOrder) ExpectUserIdParam2(userId int64) *mOrdersClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrdersClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &OrdersClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.userId = &userId
	mmCreateOrder.defaultExpectation.expectationOrigins.originUserId = minimock.CallerInfo(1)

	return mmCreateOrder
}

// ExpectItemsParam3 sets up expected param items for OrdersClient.CreateOrder
func (mmCreateOrder *mOrdersClientMockCreateOrder) ExpectItemsParam3(items []model.CartItemModel) *mOrdersClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrdersClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &OrdersClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.items = &items
	mmCreateOrder.defaultExpectation.expectationOrigins.originItems = minimock.CallerInfo(1)

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the OrdersClient.CreateOrder
func (mmCreateOrder *mOrdersClientMockCreateOrder) Inspect(f func(ctx context.Context, userId int64, items []model.CartItemModel)) *mOrdersClientMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for OrdersClientMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by OrdersClient.CreateOrder
func (mmCreateOrder *mOrdersClientMockCreateOrder) Return(i1 int64, err error) *OrdersClientMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrdersClientMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &OrdersClientMockCreateOrderResults{i1, err}
	mmCreateOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// Set uses given function f to mock the OrdersClient.CreateOrder method
func (mmCreateOrder *mOrdersClientMockCreateOrder) Set(f func(ctx context.Context, userId int64, items []model.CartItemModel) (i1 int64, err error)) *OrdersClientMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the OrdersClient.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the OrdersClient.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	mmCreateOrder.mock.funcCreateOrderOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// When sets expectation for the OrdersClient.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mOrdersClientMockCreateOrder) When(ctx context.Context, userId int64, items []model.CartItemModel) *OrdersClientMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrdersClientMock.CreateOrder mock is already set by Set")
	}

	expectation := &OrdersClientMockCreateOrderExpectation{
		mock:               mmCreateOrder.mock,
		params:             &OrdersClientMockCreateOrderParams{ctx, userId, items},
		expectationOrigins: OrdersClientMockCreateOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up OrdersClient.CreateOrder return parameters for the expectation previously defined by the When method
func (e *OrdersClientMockCreateOrderExpectation) Then(i1 int64, err error) *OrdersClientMock {
	e.results = &OrdersClientMockCreateOrderResults{i1, err}
	return e.mock
}

// Times sets number of times OrdersClient.CreateOrder should be invoked
func (mmCreateOrder *mOrdersClientMockCreateOrder) Times(n uint64) *mOrdersClientMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of OrdersClientMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	mmCreateOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateOrder
}

func (mmCreateOrder *mOrdersClientMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements OrdersClient
func (mmCreateOrder *OrdersClientMock) CreateOrder(ctx context.Context, userId int64, items []model.CartItemModel) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	mmCreateOrder.t.Helper()

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userId, items)
	}

	mm_params := OrdersClientMockCreateOrderParams{ctx, userId, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := OrdersClientMockCreateOrderParams{ctx, userId, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateOrder.t.Errorf("OrdersClientMock.CreateOrder got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userId != nil && !minimock.Equal(*mm_want_ptrs.userId, mm_got.userId) {
				mmCreateOrder.t.Errorf("OrdersClientMock.CreateOrder got unexpected parameter userId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originUserId, *mm_want_ptrs.userId, mm_got.userId, minimock.Diff(*mm_want_ptrs.userId, mm_got.userId))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmCreateOrder.t.Errorf("OrdersClientMock.CreateOrder got unexpected parameter items, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originItems, *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("OrdersClientMock.CreateOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the OrdersClientMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userId, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to OrdersClientMock.CreateOrder. %v %v %v", ctx, userId, items)
	return
}

// CreateOrderAfterCounter returns a count of finished OrdersClientMock.CreateOrder invocations
func (mmCreateOrder *OrdersClientMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of OrdersClientMock.CreateOrder invocations
func (mmCreateOrder *OrdersClientMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to OrdersClientMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mOrdersClientMockCreateOrder) Calls() []*OrdersClientMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*OrdersClientMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *OrdersClientMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *OrdersClientMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrdersClientMock.CreateOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrdersClientMock.CreateOrder at\n%s", m.CreateOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrdersClientMock.CreateOrder at\n%s with params: %#v", m.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Errorf("Expected call to OrdersClientMock.CreateOrder at\n%s", m.funcCreateOrderOrigin)
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to OrdersClientMock.CreateOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), m.CreateOrderMock.expectedInvocationsOrigin, afterCreateOrderCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrdersClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrdersClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrdersClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone()
}
