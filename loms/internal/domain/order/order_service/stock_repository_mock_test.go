// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package order_service_test

//go:generate minimock -i route256/loms/internal/domain/order/order_service.StockRepository -o stock_repository_mock_test.go -n StockRepositoryMock -p order_service_test

import (
	"context"
	"route256/loms/internal/domain/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockRepositoryMock implements StockRepository
type StockRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCancelReserved          func(ctx context.Context, items []model.OrderItem) (err error)
	funcCancelReservedOrigin    string
	inspectFuncCancelReserved   func(ctx context.Context, items []model.OrderItem)
	afterCancelReservedCounter  uint64
	beforeCancelReservedCounter uint64
	CancelReservedMock          mStockRepositoryMockCancelReserved

	funcRemoveReserved          func(ctx context.Context, items []model.OrderItem) (err error)
	funcRemoveReservedOrigin    string
	inspectFuncRemoveReserved   func(ctx context.Context, items []model.OrderItem)
	afterRemoveReservedCounter  uint64
	beforeRemoveReservedCounter uint64
	RemoveReservedMock          mStockRepositoryMockRemoveReserved

	funcReserve          func(ctx context.Context, items []model.OrderItem) (err error)
	funcReserveOrigin    string
	inspectFuncReserve   func(ctx context.Context, items []model.OrderItem)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mStockRepositoryMockReserve
}

// NewStockRepositoryMock returns a mock for StockRepository
func NewStockRepositoryMock(t minimock.Tester) *StockRepositoryMock {
	m := &StockRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CancelReservedMock = mStockRepositoryMockCancelReserved{mock: m}
	m.CancelReservedMock.callArgs = []*StockRepositoryMockCancelReservedParams{}

	m.RemoveReservedMock = mStockRepositoryMockRemoveReserved{mock: m}
	m.RemoveReservedMock.callArgs = []*StockRepositoryMockRemoveReservedParams{}

	m.ReserveMock = mStockRepositoryMockReserve{mock: m}
	m.ReserveMock.callArgs = []*StockRepositoryMockReserveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockRepositoryMockCancelReserved struct {
	optional           bool
	mock               *StockRepositoryMock
	defaultExpectation *StockRepositoryMockCancelReservedExpectation
	expectations       []*StockRepositoryMockCancelReservedExpectation

	callArgs []*StockRepositoryMockCancelReservedParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockRepositoryMockCancelReservedExpectation specifies expectation struct of the StockRepository.CancelReserved
type StockRepositoryMockCancelReservedExpectation struct {
	mock               *StockRepositoryMock
	params             *StockRepositoryMockCancelReservedParams
	paramPtrs          *StockRepositoryMockCancelReservedParamPtrs
	expectationOrigins StockRepositoryMockCancelReservedExpectationOrigins
	results            *StockRepositoryMockCancelReservedResults
	returnOrigin       string
	Counter            uint64
}

// StockRepositoryMockCancelReservedParams contains parameters of the StockRepository.CancelReserved
type StockRepositoryMockCancelReservedParams struct {
	ctx   context.Context
	items []model.OrderItem
}

// StockRepositoryMockCancelReservedParamPtrs contains pointers to parameters of the StockRepository.CancelReserved
type StockRepositoryMockCancelReservedParamPtrs struct {
	ctx   *context.Context
	items *[]model.OrderItem
}

// StockRepositoryMockCancelReservedResults contains results of the StockRepository.CancelReserved
type StockRepositoryMockCancelReservedResults struct {
	err error
}

// StockRepositoryMockCancelReservedOrigins contains origins of expectations of the StockRepository.CancelReserved
type StockRepositoryMockCancelReservedExpectationOrigins struct {
	origin      string
	originCtx   string
	originItems string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Optional() *mStockRepositoryMockCancelReserved {
	mmCancelReserved.optional = true
	return mmCancelReserved
}

// Expect sets up expected params for StockRepository.CancelReserved
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Expect(ctx context.Context, items []model.OrderItem) *mStockRepositoryMockCancelReserved {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Set")
	}

	if mmCancelReserved.defaultExpectation == nil {
		mmCancelReserved.defaultExpectation = &StockRepositoryMockCancelReservedExpectation{}
	}

	if mmCancelReserved.defaultExpectation.paramPtrs != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by ExpectParams functions")
	}

	mmCancelReserved.defaultExpectation.params = &StockRepositoryMockCancelReservedParams{ctx, items}
	mmCancelReserved.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCancelReserved.expectations {
		if minimock.Equal(e.params, mmCancelReserved.defaultExpectation.params) {
			mmCancelReserved.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCancelReserved.defaultExpectation.params)
		}
	}

	return mmCancelReserved
}

// ExpectCtxParam1 sets up expected param ctx for StockRepository.CancelReserved
func (mmCancelReserved *mStockRepositoryMockCancelReserved) ExpectCtxParam1(ctx context.Context) *mStockRepositoryMockCancelReserved {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Set")
	}

	if mmCancelReserved.defaultExpectation == nil {
		mmCancelReserved.defaultExpectation = &StockRepositoryMockCancelReservedExpectation{}
	}

	if mmCancelReserved.defaultExpectation.params != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Expect")
	}

	if mmCancelReserved.defaultExpectation.paramPtrs == nil {
		mmCancelReserved.defaultExpectation.paramPtrs = &StockRepositoryMockCancelReservedParamPtrs{}
	}
	mmCancelReserved.defaultExpectation.paramPtrs.ctx = &ctx
	mmCancelReserved.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCancelReserved
}

// ExpectItemsParam2 sets up expected param items for StockRepository.CancelReserved
func (mmCancelReserved *mStockRepositoryMockCancelReserved) ExpectItemsParam2(items []model.OrderItem) *mStockRepositoryMockCancelReserved {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Set")
	}

	if mmCancelReserved.defaultExpectation == nil {
		mmCancelReserved.defaultExpectation = &StockRepositoryMockCancelReservedExpectation{}
	}

	if mmCancelReserved.defaultExpectation.params != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Expect")
	}

	if mmCancelReserved.defaultExpectation.paramPtrs == nil {
		mmCancelReserved.defaultExpectation.paramPtrs = &StockRepositoryMockCancelReservedParamPtrs{}
	}
	mmCancelReserved.defaultExpectation.paramPtrs.items = &items
	mmCancelReserved.defaultExpectation.expectationOrigins.originItems = minimock.CallerInfo(1)

	return mmCancelReserved
}

// Inspect accepts an inspector function that has same arguments as the StockRepository.CancelReserved
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Inspect(f func(ctx context.Context, items []model.OrderItem)) *mStockRepositoryMockCancelReserved {
	if mmCancelReserved.mock.inspectFuncCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("Inspect function is already set for StockRepositoryMock.CancelReserved")
	}

	mmCancelReserved.mock.inspectFuncCancelReserved = f

	return mmCancelReserved
}

// Return sets up results that will be returned by StockRepository.CancelReserved
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Return(err error) *StockRepositoryMock {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Set")
	}

	if mmCancelReserved.defaultExpectation == nil {
		mmCancelReserved.defaultExpectation = &StockRepositoryMockCancelReservedExpectation{mock: mmCancelReserved.mock}
	}
	mmCancelReserved.defaultExpectation.results = &StockRepositoryMockCancelReservedResults{err}
	mmCancelReserved.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCancelReserved.mock
}

// Set uses given function f to mock the StockRepository.CancelReserved method
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Set(f func(ctx context.Context, items []model.OrderItem) (err error)) *StockRepositoryMock {
	if mmCancelReserved.defaultExpectation != nil {
		mmCancelReserved.mock.t.Fatalf("Default expectation is already set for the StockRepository.CancelReserved method")
	}

	if len(mmCancelReserved.expectations) > 0 {
		mmCancelReserved.mock.t.Fatalf("Some expectations are already set for the StockRepository.CancelReserved method")
	}

	mmCancelReserved.mock.funcCancelReserved = f
	mmCancelReserved.mock.funcCancelReservedOrigin = minimock.CallerInfo(1)
	return mmCancelReserved.mock
}

// When sets expectation for the StockRepository.CancelReserved which will trigger the result defined by the following
// Then helper
func (mmCancelReserved *mStockRepositoryMockCancelReserved) When(ctx context.Context, items []model.OrderItem) *StockRepositoryMockCancelReservedExpectation {
	if mmCancelReserved.mock.funcCancelReserved != nil {
		mmCancelReserved.mock.t.Fatalf("StockRepositoryMock.CancelReserved mock is already set by Set")
	}

	expectation := &StockRepositoryMockCancelReservedExpectation{
		mock:               mmCancelReserved.mock,
		params:             &StockRepositoryMockCancelReservedParams{ctx, items},
		expectationOrigins: StockRepositoryMockCancelReservedExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCancelReserved.expectations = append(mmCancelReserved.expectations, expectation)
	return expectation
}

// Then sets up StockRepository.CancelReserved return parameters for the expectation previously defined by the When method
func (e *StockRepositoryMockCancelReservedExpectation) Then(err error) *StockRepositoryMock {
	e.results = &StockRepositoryMockCancelReservedResults{err}
	return e.mock
}

// Times sets number of times StockRepository.CancelReserved should be invoked
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Times(n uint64) *mStockRepositoryMockCancelReserved {
	if n == 0 {
		mmCancelReserved.mock.t.Fatalf("Times of StockRepositoryMock.CancelReserved mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCancelReserved.expectedInvocations, n)
	mmCancelReserved.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCancelReserved
}

func (mmCancelReserved *mStockRepositoryMockCancelReserved) invocationsDone() bool {
	if len(mmCancelReserved.expectations) == 0 && mmCancelReserved.defaultExpectation == nil && mmCancelReserved.mock.funcCancelReserved == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCancelReserved.mock.afterCancelReservedCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCancelReserved.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CancelReserved implements StockRepository
func (mmCancelReserved *StockRepositoryMock) CancelReserved(ctx context.Context, items []model.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmCancelReserved.beforeCancelReservedCounter, 1)
	defer mm_atomic.AddUint64(&mmCancelReserved.afterCancelReservedCounter, 1)

	mmCancelReserved.t.Helper()

	if mmCancelReserved.inspectFuncCancelReserved != nil {
		mmCancelReserved.inspectFuncCancelReserved(ctx, items)
	}

	mm_params := StockRepositoryMockCancelReservedParams{ctx, items}

	// Record call args
	mmCancelReserved.CancelReservedMock.mutex.Lock()
	mmCancelReserved.CancelReservedMock.callArgs = append(mmCancelReserved.CancelReservedMock.callArgs, &mm_params)
	mmCancelReserved.CancelReservedMock.mutex.Unlock()

	for _, e := range mmCancelReserved.CancelReservedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCancelReserved.CancelReservedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCancelReserved.CancelReservedMock.defaultExpectation.Counter, 1)
		mm_want := mmCancelReserved.CancelReservedMock.defaultExpectation.params
		mm_want_ptrs := mmCancelReserved.CancelReservedMock.defaultExpectation.paramPtrs

		mm_got := StockRepositoryMockCancelReservedParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCancelReserved.t.Errorf("StockRepositoryMock.CancelReserved got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCancelReserved.CancelReservedMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmCancelReserved.t.Errorf("StockRepositoryMock.CancelReserved got unexpected parameter items, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCancelReserved.CancelReservedMock.defaultExpectation.expectationOrigins.originItems, *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCancelReserved.t.Errorf("StockRepositoryMock.CancelReserved got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCancelReserved.CancelReservedMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCancelReserved.CancelReservedMock.defaultExpectation.results
		if mm_results == nil {
			mmCancelReserved.t.Fatal("No results are set for the StockRepositoryMock.CancelReserved")
		}
		return (*mm_results).err
	}
	if mmCancelReserved.funcCancelReserved != nil {
		return mmCancelReserved.funcCancelReserved(ctx, items)
	}
	mmCancelReserved.t.Fatalf("Unexpected call to StockRepositoryMock.CancelReserved. %v %v", ctx, items)
	return
}

// CancelReservedAfterCounter returns a count of finished StockRepositoryMock.CancelReserved invocations
func (mmCancelReserved *StockRepositoryMock) CancelReservedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancelReserved.afterCancelReservedCounter)
}

// CancelReservedBeforeCounter returns a count of StockRepositoryMock.CancelReserved invocations
func (mmCancelReserved *StockRepositoryMock) CancelReservedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancelReserved.beforeCancelReservedCounter)
}

// Calls returns a list of arguments used in each call to StockRepositoryMock.CancelReserved.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCancelReserved *mStockRepositoryMockCancelReserved) Calls() []*StockRepositoryMockCancelReservedParams {
	mmCancelReserved.mutex.RLock()

	argCopy := make([]*StockRepositoryMockCancelReservedParams, len(mmCancelReserved.callArgs))
	copy(argCopy, mmCancelReserved.callArgs)

	mmCancelReserved.mutex.RUnlock()

	return argCopy
}

// MinimockCancelReservedDone returns true if the count of the CancelReserved invocations corresponds
// the number of defined expectations
func (m *StockRepositoryMock) MinimockCancelReservedDone() bool {
	if m.CancelReservedMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CancelReservedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CancelReservedMock.invocationsDone()
}

// MinimockCancelReservedInspect logs each unmet expectation
func (m *StockRepositoryMock) MinimockCancelReservedInspect() {
	for _, e := range m.CancelReservedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepositoryMock.CancelReserved at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCancelReservedCounter := mm_atomic.LoadUint64(&m.afterCancelReservedCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CancelReservedMock.defaultExpectation != nil && afterCancelReservedCounter < 1 {
		if m.CancelReservedMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockRepositoryMock.CancelReserved at\n%s", m.CancelReservedMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockRepositoryMock.CancelReserved at\n%s with params: %#v", m.CancelReservedMock.defaultExpectation.expectationOrigins.origin, *m.CancelReservedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancelReserved != nil && afterCancelReservedCounter < 1 {
		m.t.Errorf("Expected call to StockRepositoryMock.CancelReserved at\n%s", m.funcCancelReservedOrigin)
	}

	if !m.CancelReservedMock.invocationsDone() && afterCancelReservedCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepositoryMock.CancelReserved at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CancelReservedMock.expectedInvocations), m.CancelReservedMock.expectedInvocationsOrigin, afterCancelReservedCounter)
	}
}

type mStockRepositoryMockRemoveReserved struct {
	optional           bool
	mock               *StockRepositoryMock
	defaultExpectation *StockRepositoryMockRemoveReservedExpectation
	expectations       []*StockRepositoryMockRemoveReservedExpectation

	callArgs []*StockRepositoryMockRemoveReservedParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockRepositoryMockRemoveReservedExpectation specifies expectation struct of the StockRepository.RemoveReserved
type StockRepositoryMockRemoveReservedExpectation struct {
	mock               *StockRepositoryMock
	params             *StockRepositoryMockRemoveReservedParams
	paramPtrs          *StockRepositoryMockRemoveReservedParamPtrs
	expectationOrigins StockRepositoryMockRemoveReservedExpectationOrigins
	results            *StockRepositoryMockRemoveReservedResults
	returnOrigin       string
	Counter            uint64
}

// StockRepositoryMockRemoveReservedParams contains parameters of the StockRepository.RemoveReserved
type StockRepositoryMockRemoveReservedParams struct {
	ctx   context.Context
	items []model.OrderItem
}

// StockRepositoryMockRemoveReservedParamPtrs contains pointers to parameters of the StockRepository.RemoveReserved
type StockRepositoryMockRemoveReservedParamPtrs struct {
	ctx   *context.Context
	items *[]model.OrderItem
}

// StockRepositoryMockRemoveReservedResults contains results of the StockRepository.RemoveReserved
type StockRepositoryMockRemoveReservedResults struct {
	err error
}

// StockRepositoryMockRemoveReservedOrigins contains origins of expectations of the StockRepository.RemoveReserved
type StockRepositoryMockRemoveReservedExpectationOrigins struct {
	origin      string
	originCtx   string
	originItems string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Optional() *mStockRepositoryMockRemoveReserved {
	mmRemoveReserved.optional = true
	return mmRemoveReserved
}

// Expect sets up expected params for StockRepository.RemoveReserved
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Expect(ctx context.Context, items []model.OrderItem) *mStockRepositoryMockRemoveReserved {
	if mmRemoveReserved.mock.funcRemoveReserved != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Set")
	}

	if mmRemoveReserved.defaultExpectation == nil {
		mmRemoveReserved.defaultExpectation = &StockRepositoryMockRemoveReservedExpectation{}
	}

	if mmRemoveReserved.defaultExpectation.paramPtrs != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by ExpectParams functions")
	}

	mmRemoveReserved.defaultExpectation.params = &StockRepositoryMockRemoveReservedParams{ctx, items}
	mmRemoveReserved.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRemoveReserved.expectations {
		if minimock.Equal(e.params, mmRemoveReserved.defaultExpectation.params) {
			mmRemoveReserved.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRemoveReserved.defaultExpectation.params)
		}
	}

	return mmRemoveReserved
}

// ExpectCtxParam1 sets up expected param ctx for StockRepository.RemoveReserved
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) ExpectCtxParam1(ctx context.Context) *mStockRepositoryMockRemoveReserved {
	if mmRemoveReserved.mock.funcRemoveReserved != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Set")
	}

	if mmRemoveReserved.defaultExpectation == nil {
		mmRemoveReserved.defaultExpectation = &StockRepositoryMockRemoveReservedExpectation{}
	}

	if mmRemoveReserved.defaultExpectation.params != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Expect")
	}

	if mmRemoveReserved.defaultExpectation.paramPtrs == nil {
		mmRemoveReserved.defaultExpectation.paramPtrs = &StockRepositoryMockRemoveReservedParamPtrs{}
	}
	mmRemoveReserved.defaultExpectation.paramPtrs.ctx = &ctx
	mmRemoveReserved.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRemoveReserved
}

// ExpectItemsParam2 sets up expected param items for StockRepository.RemoveReserved
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) ExpectItemsParam2(items []model.OrderItem) *mStockRepositoryMockRemoveReserved {
	if mmRemoveReserved.mock.funcRemoveReserved != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Set")
	}

	if mmRemoveReserved.defaultExpectation == nil {
		mmRemoveReserved.defaultExpectation = &StockRepositoryMockRemoveReservedExpectation{}
	}

	if mmRemoveReserved.defaultExpectation.params != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Expect")
	}

	if mmRemoveReserved.defaultExpectation.paramPtrs == nil {
		mmRemoveReserved.defaultExpectation.paramPtrs = &StockRepositoryMockRemoveReservedParamPtrs{}
	}
	mmRemoveReserved.defaultExpectation.paramPtrs.items = &items
	mmRemoveReserved.defaultExpectation.expectationOrigins.originItems = minimock.CallerInfo(1)

	return mmRemoveReserved
}

// Inspect accepts an inspector function that has same arguments as the StockRepository.RemoveReserved
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Inspect(f func(ctx context.Context, items []model.OrderItem)) *mStockRepositoryMockRemoveReserved {
	if mmRemoveReserved.mock.inspectFuncRemoveReserved != nil {
		mmRemoveReserved.mock.t.Fatalf("Inspect function is already set for StockRepositoryMock.RemoveReserved")
	}

	mmRemoveReserved.mock.inspectFuncRemoveReserved = f

	return mmRemoveReserved
}

// Return sets up results that will be returned by StockRepository.RemoveReserved
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Return(err error) *StockRepositoryMock {
	if mmRemoveReserved.mock.funcRemoveReserved != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Set")
	}

	if mmRemoveReserved.defaultExpectation == nil {
		mmRemoveReserved.defaultExpectation = &StockRepositoryMockRemoveReservedExpectation{mock: mmRemoveReserved.mock}
	}
	mmRemoveReserved.defaultExpectation.results = &StockRepositoryMockRemoveReservedResults{err}
	mmRemoveReserved.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRemoveReserved.mock
}

// Set uses given function f to mock the StockRepository.RemoveReserved method
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Set(f func(ctx context.Context, items []model.OrderItem) (err error)) *StockRepositoryMock {
	if mmRemoveReserved.defaultExpectation != nil {
		mmRemoveReserved.mock.t.Fatalf("Default expectation is already set for the StockRepository.RemoveReserved method")
	}

	if len(mmRemoveReserved.expectations) > 0 {
		mmRemoveReserved.mock.t.Fatalf("Some expectations are already set for the StockRepository.RemoveReserved method")
	}

	mmRemoveReserved.mock.funcRemoveReserved = f
	mmRemoveReserved.mock.funcRemoveReservedOrigin = minimock.CallerInfo(1)
	return mmRemoveReserved.mock
}

// When sets expectation for the StockRepository.RemoveReserved which will trigger the result defined by the following
// Then helper
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) When(ctx context.Context, items []model.OrderItem) *StockRepositoryMockRemoveReservedExpectation {
	if mmRemoveReserved.mock.funcRemoveReserved != nil {
		mmRemoveReserved.mock.t.Fatalf("StockRepositoryMock.RemoveReserved mock is already set by Set")
	}

	expectation := &StockRepositoryMockRemoveReservedExpectation{
		mock:               mmRemoveReserved.mock,
		params:             &StockRepositoryMockRemoveReservedParams{ctx, items},
		expectationOrigins: StockRepositoryMockRemoveReservedExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRemoveReserved.expectations = append(mmRemoveReserved.expectations, expectation)
	return expectation
}

// Then sets up StockRepository.RemoveReserved return parameters for the expectation previously defined by the When method
func (e *StockRepositoryMockRemoveReservedExpectation) Then(err error) *StockRepositoryMock {
	e.results = &StockRepositoryMockRemoveReservedResults{err}
	return e.mock
}

// Times sets number of times StockRepository.RemoveReserved should be invoked
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Times(n uint64) *mStockRepositoryMockRemoveReserved {
	if n == 0 {
		mmRemoveReserved.mock.t.Fatalf("Times of StockRepositoryMock.RemoveReserved mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRemoveReserved.expectedInvocations, n)
	mmRemoveReserved.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRemoveReserved
}

func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) invocationsDone() bool {
	if len(mmRemoveReserved.expectations) == 0 && mmRemoveReserved.defaultExpectation == nil && mmRemoveReserved.mock.funcRemoveReserved == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRemoveReserved.mock.afterRemoveReservedCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRemoveReserved.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// RemoveReserved implements StockRepository
func (mmRemoveReserved *StockRepositoryMock) RemoveReserved(ctx context.Context, items []model.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmRemoveReserved.beforeRemoveReservedCounter, 1)
	defer mm_atomic.AddUint64(&mmRemoveReserved.afterRemoveReservedCounter, 1)

	mmRemoveReserved.t.Helper()

	if mmRemoveReserved.inspectFuncRemoveReserved != nil {
		mmRemoveReserved.inspectFuncRemoveReserved(ctx, items)
	}

	mm_params := StockRepositoryMockRemoveReservedParams{ctx, items}

	// Record call args
	mmRemoveReserved.RemoveReservedMock.mutex.Lock()
	mmRemoveReserved.RemoveReservedMock.callArgs = append(mmRemoveReserved.RemoveReservedMock.callArgs, &mm_params)
	mmRemoveReserved.RemoveReservedMock.mutex.Unlock()

	for _, e := range mmRemoveReserved.RemoveReservedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRemoveReserved.RemoveReservedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRemoveReserved.RemoveReservedMock.defaultExpectation.Counter, 1)
		mm_want := mmRemoveReserved.RemoveReservedMock.defaultExpectation.params
		mm_want_ptrs := mmRemoveReserved.RemoveReservedMock.defaultExpectation.paramPtrs

		mm_got := StockRepositoryMockRemoveReservedParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRemoveReserved.t.Errorf("StockRepositoryMock.RemoveReserved got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRemoveReserved.RemoveReservedMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmRemoveReserved.t.Errorf("StockRepositoryMock.RemoveReserved got unexpected parameter items, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRemoveReserved.RemoveReservedMock.defaultExpectation.expectationOrigins.originItems, *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRemoveReserved.t.Errorf("StockRepositoryMock.RemoveReserved got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRemoveReserved.RemoveReservedMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRemoveReserved.RemoveReservedMock.defaultExpectation.results
		if mm_results == nil {
			mmRemoveReserved.t.Fatal("No results are set for the StockRepositoryMock.RemoveReserved")
		}
		return (*mm_results).err
	}
	if mmRemoveReserved.funcRemoveReserved != nil {
		return mmRemoveReserved.funcRemoveReserved(ctx, items)
	}
	mmRemoveReserved.t.Fatalf("Unexpected call to StockRepositoryMock.RemoveReserved. %v %v", ctx, items)
	return
}

// RemoveReservedAfterCounter returns a count of finished StockRepositoryMock.RemoveReserved invocations
func (mmRemoveReserved *StockRepositoryMock) RemoveReservedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemoveReserved.afterRemoveReservedCounter)
}

// RemoveReservedBeforeCounter returns a count of StockRepositoryMock.RemoveReserved invocations
func (mmRemoveReserved *StockRepositoryMock) RemoveReservedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemoveReserved.beforeRemoveReservedCounter)
}

// Calls returns a list of arguments used in each call to StockRepositoryMock.RemoveReserved.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRemoveReserved *mStockRepositoryMockRemoveReserved) Calls() []*StockRepositoryMockRemoveReservedParams {
	mmRemoveReserved.mutex.RLock()

	argCopy := make([]*StockRepositoryMockRemoveReservedParams, len(mmRemoveReserved.callArgs))
	copy(argCopy, mmRemoveReserved.callArgs)

	mmRemoveReserved.mutex.RUnlock()

	return argCopy
}

// MinimockRemoveReservedDone returns true if the count of the RemoveReserved invocations corresponds
// the number of defined expectations
func (m *StockRepositoryMock) MinimockRemoveReservedDone() bool {
	if m.RemoveReservedMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RemoveReservedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RemoveReservedMock.invocationsDone()
}

// MinimockRemoveReservedInspect logs each unmet expectation
func (m *StockRepositoryMock) MinimockRemoveReservedInspect() {
	for _, e := range m.RemoveReservedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepositoryMock.RemoveReserved at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRemoveReservedCounter := mm_atomic.LoadUint64(&m.afterRemoveReservedCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveReservedMock.defaultExpectation != nil && afterRemoveReservedCounter < 1 {
		if m.RemoveReservedMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockRepositoryMock.RemoveReserved at\n%s", m.RemoveReservedMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockRepositoryMock.RemoveReserved at\n%s with params: %#v", m.RemoveReservedMock.defaultExpectation.expectationOrigins.origin, *m.RemoveReservedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemoveReserved != nil && afterRemoveReservedCounter < 1 {
		m.t.Errorf("Expected call to StockRepositoryMock.RemoveReserved at\n%s", m.funcRemoveReservedOrigin)
	}

	if !m.RemoveReservedMock.invocationsDone() && afterRemoveReservedCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepositoryMock.RemoveReserved at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RemoveReservedMock.expectedInvocations), m.RemoveReservedMock.expectedInvocationsOrigin, afterRemoveReservedCounter)
	}
}

type mStockRepositoryMockReserve struct {
	optional           bool
	mock               *StockRepositoryMock
	defaultExpectation *StockRepositoryMockReserveExpectation
	expectations       []*StockRepositoryMockReserveExpectation

	callArgs []*StockRepositoryMockReserveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockRepositoryMockReserveExpectation specifies expectation struct of the StockRepository.Reserve
type StockRepositoryMockReserveExpectation struct {
	mock               *StockRepositoryMock
	params             *StockRepositoryMockReserveParams
	paramPtrs          *StockRepositoryMockReserveParamPtrs
	expectationOrigins StockRepositoryMockReserveExpectationOrigins
	results            *StockRepositoryMockReserveResults
	returnOrigin       string
	Counter            uint64
}

// StockRepositoryMockReserveParams contains parameters of the StockRepository.Reserve
type StockRepositoryMockReserveParams struct {
	ctx   context.Context
	items []model.OrderItem
}

// StockRepositoryMockReserveParamPtrs contains pointers to parameters of the StockRepository.Reserve
type StockRepositoryMockReserveParamPtrs struct {
	ctx   *context.Context
	items *[]model.OrderItem
}

// StockRepositoryMockReserveResults contains results of the StockRepository.Reserve
type StockRepositoryMockReserveResults struct {
	err error
}

// StockRepositoryMockReserveOrigins contains origins of expectations of the StockRepository.Reserve
type StockRepositoryMockReserveExpectationOrigins struct {
	origin      string
	originCtx   string
	originItems string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserve *mStockRepositoryMockReserve) Optional() *mStockRepositoryMockReserve {
	mmReserve.optional = true
	return mmReserve
}

// Expect sets up expected params for StockRepository.Reserve
func (mmReserve *mStockRepositoryMockReserve) Expect(ctx context.Context, items []model.OrderItem) *mStockRepositoryMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepositoryMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.paramPtrs != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by ExpectParams functions")
	}

	mmReserve.defaultExpectation.params = &StockRepositoryMockReserveParams{ctx, items}
	mmReserve.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// ExpectCtxParam1 sets up expected param ctx for StockRepository.Reserve
func (mmReserve *mStockRepositoryMockReserve) ExpectCtxParam1(ctx context.Context) *mStockRepositoryMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepositoryMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StockRepositoryMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ctx = &ctx
	mmReserve.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReserve
}

// ExpectItemsParam2 sets up expected param items for StockRepository.Reserve
func (mmReserve *mStockRepositoryMockReserve) ExpectItemsParam2(items []model.OrderItem) *mStockRepositoryMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepositoryMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StockRepositoryMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.items = &items
	mmReserve.defaultExpectation.expectationOrigins.originItems = minimock.CallerInfo(1)

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the StockRepository.Reserve
func (mmReserve *mStockRepositoryMockReserve) Inspect(f func(ctx context.Context, items []model.OrderItem)) *mStockRepositoryMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for StockRepositoryMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by StockRepository.Reserve
func (mmReserve *mStockRepositoryMockReserve) Return(err error) *StockRepositoryMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepositoryMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &StockRepositoryMockReserveResults{err}
	mmReserve.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReserve.mock
}

// Set uses given function f to mock the StockRepository.Reserve method
func (mmReserve *mStockRepositoryMockReserve) Set(f func(ctx context.Context, items []model.OrderItem) (err error)) *StockRepositoryMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the StockRepository.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the StockRepository.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	mmReserve.mock.funcReserveOrigin = minimock.CallerInfo(1)
	return mmReserve.mock
}

// When sets expectation for the StockRepository.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mStockRepositoryMockReserve) When(ctx context.Context, items []model.OrderItem) *StockRepositoryMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepositoryMock.Reserve mock is already set by Set")
	}

	expectation := &StockRepositoryMockReserveExpectation{
		mock:               mmReserve.mock,
		params:             &StockRepositoryMockReserveParams{ctx, items},
		expectationOrigins: StockRepositoryMockReserveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up StockRepository.Reserve return parameters for the expectation previously defined by the When method
func (e *StockRepositoryMockReserveExpectation) Then(err error) *StockRepositoryMock {
	e.results = &StockRepositoryMockReserveResults{err}
	return e.mock
}

// Times sets number of times StockRepository.Reserve should be invoked
func (mmReserve *mStockRepositoryMockReserve) Times(n uint64) *mStockRepositoryMockReserve {
	if n == 0 {
		mmReserve.mock.t.Fatalf("Times of StockRepositoryMock.Reserve mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserve.expectedInvocations, n)
	mmReserve.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReserve
}

func (mmReserve *mStockRepositoryMockReserve) invocationsDone() bool {
	if len(mmReserve.expectations) == 0 && mmReserve.defaultExpectation == nil && mmReserve.mock.funcReserve == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserve.mock.afterReserveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserve.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Reserve implements StockRepository
func (mmReserve *StockRepositoryMock) Reserve(ctx context.Context, items []model.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	mmReserve.t.Helper()

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, items)
	}

	mm_params := StockRepositoryMockReserveParams{ctx, items}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_want_ptrs := mmReserve.ReserveMock.defaultExpectation.paramPtrs

		mm_got := StockRepositoryMockReserveParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserve.t.Errorf("StockRepositoryMock.Reserve got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserve.ReserveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmReserve.t.Errorf("StockRepositoryMock.Reserve got unexpected parameter items, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReserve.ReserveMock.defaultExpectation.expectationOrigins.originItems, *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("StockRepositoryMock.Reserve got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReserve.ReserveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the StockRepositoryMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, items)
	}
	mmReserve.t.Fatalf("Unexpected call to StockRepositoryMock.Reserve. %v %v", ctx, items)
	return
}

// ReserveAfterCounter returns a count of finished StockRepositoryMock.Reserve invocations
func (mmReserve *StockRepositoryMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of StockRepositoryMock.Reserve invocations
func (mmReserve *StockRepositoryMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to StockRepositoryMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mStockRepositoryMockReserve) Calls() []*StockRepositoryMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*StockRepositoryMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *StockRepositoryMock) MinimockReserveDone() bool {
	if m.ReserveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveMock.invocationsDone()
}

// MinimockReserveInspect logs each unmet expectation
func (m *StockRepositoryMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepositoryMock.Reserve at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReserveCounter := mm_atomic.LoadUint64(&m.afterReserveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && afterReserveCounter < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockRepositoryMock.Reserve at\n%s", m.ReserveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockRepositoryMock.Reserve at\n%s with params: %#v", m.ReserveMock.defaultExpectation.expectationOrigins.origin, *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && afterReserveCounter < 1 {
		m.t.Errorf("Expected call to StockRepositoryMock.Reserve at\n%s", m.funcReserveOrigin)
	}

	if !m.ReserveMock.invocationsDone() && afterReserveCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepositoryMock.Reserve at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveMock.expectedInvocations), m.ReserveMock.expectedInvocationsOrigin, afterReserveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCancelReservedInspect()

			m.MinimockRemoveReservedInspect()

			m.MinimockReserveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCancelReservedDone() &&
		m.MinimockRemoveReservedDone() &&
		m.MinimockReserveDone()
}
