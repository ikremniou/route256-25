// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: outbox.sql

package query

import (
	"context"
)

const getPending = `-- name: GetPending :many
select id, aggregate_id, aggregate_type, event_type, key, payload, topic, status, created_at, updated_at from outbox
where status = 'pending'
order by updated_at asc
limit $1
for update skip locked
`

func (q *Queries) GetPending(ctx context.Context, batchSize int32) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, getPending, batchSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.AggregateType,
			&i.EventType,
			&i.Key,
			&i.Payload,
			&i.Topic,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
