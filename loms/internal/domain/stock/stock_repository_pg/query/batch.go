// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: batch.go

package query

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const removeReserve = `-- name: RemoveReserve :batchexec
update stocks
set reserved = reserved - $2, total_count = total_count - $2
where sku = $1
`

type RemoveReserveBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type RemoveReserveParams struct {
	Sku   int64
	Count int64
}

func (q *Queries) RemoveReserve(ctx context.Context, arg []RemoveReserveParams) *RemoveReserveBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Sku,
			a.Count,
		}
		batch.Queue(removeReserve, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &RemoveReserveBatchResults{br, len(arg), false}
}

func (b *RemoveReserveBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *RemoveReserveBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const reserve = `-- name: Reserve :batchone
update stocks
set reserved = reserved + $2
where sku = $1
returning sku
`

type ReserveBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type ReserveParams struct {
	Sku   int64
	Count int64
}

func (q *Queries) Reserve(ctx context.Context, arg []ReserveParams) *ReserveBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Sku,
			a.Count,
		}
		batch.Queue(reserve, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &ReserveBatchResults{br, len(arg), false}
}

func (b *ReserveBatchResults) QueryRow(f func(int, int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var sku int64
		if b.closed {
			if f != nil {
				f(t, sku, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&sku)
		if f != nil {
			f(t, sku, err)
		}
	}
}

func (b *ReserveBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
